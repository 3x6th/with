openapi: 3.1.0
info:
  title: API of service WEB3.WITH
  description: Operations of service
  version: 1.0.0

paths:
  /auth:
    post:
      summary: Аутентификация пользователя
      description: Локальная аутентификация пользователя по email и password
      operationId: auth
      tags:
        - Auth And Registration Local
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDto'
      responses:
        '200':
          description: Аутентификация прошла успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'
        '500':
          description: Ошибка с сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'
  /register:
    post:
      summary: Локальная регистрация
      description: Локальная регистрация пользователя
      operationId: register
      tags:
        - Auth And Registration Local
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDto'
      responses:
        '200':
          description: Registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'
        '400':
          description: Invalid input
        '500':
          description: Ошибка с сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'
  /vacancy/all:
    post:
      summary: Get a list of vacancies
      operationId: getVacancies
      tags:
        - Vacancy
      parameters:
        - in: header
          name: Content-Type
          required: false
          schema:
            type: string
            enum:
              - application/json
          default: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VacancyRq'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VacanciesRs'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WithAppExceptionRs'
  /vacancy/{id}:
    get:
      summary: Getting a job by ID
      description: Returns information about the vacancy by the ID.
      operationId: getVacancyById
      tags:
        - Vacancy
      parameters:
        - name: id
          in: path
          description: ID of vacancy for getting information
          required: true
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        '200':
          description: The vacancy was successfully found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VacancyDTO'
        '404':
          description: The vacancy was not found

  /vacancy/search:
    post:
      summary: Search for vacancies by keyword with pagination
      operationId: getVacanciesByKeyword
      tags:
        - Vacancy
      requestBody:
        description: Request body containing pagination information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VacancyRq'
      parameters:
        - in: query
          name: keyword
          description: Optional keyword to search for in job vacancies
          required: false
          schema:
            type: string
            example: "data"
      responses:
        '200':
          description: A list of job vacancies matching the search keyword with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VacanciesRs'
        '400':
          description: Invalid input provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WithAppExceptionRs'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WithAppExceptionRs'

  /vacancy/employer/{id}:
    get:
      summary: Get employer and its vacancies by employer ID
      description: Returns detailed information about an employer and its associated vacancies.
      operationId: getEmployerWithVacanciesById
      tags:
        - Employer
        - Vacancy
      parameters:
        - name: id
          in: path
          description: ID of the employer to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Employer and vacancies data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployerWithVacancyRs'
        '404':
          description: Employer not found
  /vacancy/{id}/apply:
    post:
      summary: Send resume
      description: Send resume
      operationId: sendResume
      tags:
        - Vacancy
        - Resume
      parameters:
        - name: id
          in: path
          description: ID of vacancy
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeId'
      responses:
        '200':
          description: Resume sended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'
        '400':
          description: Invalid input
        '500':
          description: Ошибка с сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'
  /resume/create:
    post:
      summary: Create resume
      description: Create resume
      operationId: resumeCreate
      tags:
        - Resume
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeDto'
      responses:
        '200':
          description: Resume created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'
        '400':
          description: Invalid input
        '500':
          description: Ошибка с сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'

  /employer/{id}:
    get:
      summary: Get an employer by ID
      description: Returns detailed information about an employer.
      operationId: getEmployerById
      tags:
        - Employer
      parameters:
        - name: id
          in: path
          description: ID of the employer to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Employer data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployerDTO'
        '404':
          description: Employer not found

  /employer/register:
    post:
      summary: Локальная регистрация эмплоера
      description: Локальная регистрация эмплоера
      operationId: employerRegistration
      tags:
        - Employer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployerDTO'
      responses:
        '200':
          description: Registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'
        '400':
          description: Invalid input
        '500':
          description: Ошибка с сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'

  /private/applicant/registration:
    post:
      summary: Локальная регистрация апликанта
      description: Локальная регистрация апликанта
      operationId: applicantRegistration
      tags:
        - Applicant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicantDto'
      responses:
        '200':
          description: Registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'
        '400':
          description: Invalid input
        '500':
          description: Ошибка с сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppSecurityRs'
#  /private/applicant/resume/create:
#    post:
#      summary: Локальная регистрация апликанта
#      description: Локальная регистрация апликанта
#      operationId: applicantRegister
#      tags:
#        - Applicant
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/ResumeDto'
#      responses:
#        '200':
#          description: Registration success
#          content:
#           application/json:
#              schema:
#                $ref: '#/components/schemas/AppSecurityRs'
#        '400':
#          description: Invalid input
#        '500':
#          description: Ошибка с сервера
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/AppSecurityRs'

components:
  schemas:
    VacancyRq:
      type: object
      properties:
        page:
          type: integer
          format: int32
          default: 0
#        size:
#          type: integer
#          format: int64

    VacanciesRs:
      type: object
      properties:
        vacancies:
          type: array
          description: Array of vacancies
          items:
            $ref: '#/components/schemas/VacancyPreviewDTO'
        isLastPage:
          type: boolean

    VacancyDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        location:
          type: string
        workMode:
          type: string
          description: Format of work
          example: "Remote"
        salary:
          type: integer
        companyName:
          type: string
        tags:
          type: array
          description: Array of tags
          items:
            type: string
#            $ref: '#/components/schemas/TagDTO'

    VacancyPreviewDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        salary:
          type: integer
        companyName:
          type: string
        tags:
          type: array
          description: Array of tags
          items:
            type: string
#            $ref: '#/components/schemas/TagDTO'

#    TagDTO:
#      type: object
#      properties:
#        name:
#          type: string

    WithAppExceptionRs:
      type: object
      properties:
        status:
          type: string
          description: The HTTP status of the response
          example: "200 OK"
        message:
          type: string
          description: Error message
          example: "Error while validating"
        timestamp:
          type: string
          format: date-time
          description: The timestamp of the response
          example: "2024-07-28T12:34:56Z"
    EmployerDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the employer
        companyName:
          type: string
          description: Name of the company
        website:
          type: string
          description: Website URL of the company
        description:
          type: string
          description: Brief description of the company
        location:
          type: string
          description: Location of the company
        email:
          type: string
          description: Contact email of the company
    EmployerWithVacancyRs:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the employer
        companyName:
          type: string
          description: Name of the company
        vacancies:
          type: array
          description: List of vacancies offered by the employer
          items:
            $ref: '#/components/schemas/VacancyPreviewDTO'
    AuthDto:
      type: object
      properties:
        email:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          example: "password123"
    RegistrationDto:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          example: "john_doe"
        password:
          type: string
          description: The password of the user
          example: "password123"
        email:
          type: string
          description: The email of the user
          example: "john.doe@example.com"
        role:
          $ref: '#/components/schemas/RoleName'
    RoleName:
      type: string
      enum:
        - ROLE_DEFAULT
#        - ROLE_ADMIN
        - ROLE_EMPLOYER
        - ROLE_APPLICANT
    ApplicantDto:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the applicant
          example: "Jhon"
        secondName:
          type: string
          description: Second name of the applicant
          example: "Doe"
        email:
          type: string
          description: The email of the applicant
          example: "john.doe@example.com"
    ResumeDto:
      type: object
      properties:
        title:
          type: string
          description: Title of the resume
          example: "Java Developer"
        description:
          type: string
          description: Description of the resume
          example: "Develop and maintain Java applications"
        desiredSalary:
          type: string
          description: Applicant desired salary
          example: "2000"
        workMode:
          type: string
          description: Applicant desired work mode
          example: "Remote"
        location:
          type: string
          description: Applicant location
          example: "New York"
        tags:
          type: array
          description: Array of tags
          items:
            type: string
    ResumeId:
      type: object
      properties:
        resumeId:
          type: long
          description: ID of Resume
          example: "4"
    BaseSecurityRs:
      type: object
      properties:
        status:
          type: string
          description: The HTTP status of the response
          example: "200 OK"
        message:
          type: string
          description: The message of the response
          example: "Operation successful"
        timestamp:
          type: string
          format: date-time
          description: The timestamp of the response
          example: "2024-07-28T12:34:56Z"

    AppSecurityRs:
      allOf:
        - $ref: '#/components/schemas/BaseSecurityRs'
      description: App-specific security response